#!/usr/bin/env bash

function lamp_load_configuration() {

  # load environment file
  if [ ! -f envs/$1 ]; then
    echo "Environment $1 not found!"
    exit 1
  fi
  source envs/$1

  # If password is not set ask for it
  if [ -x $OS_PASSWORD ]; then
    echo "OpenStack password: "
    read -sr PASSWORD_INPUT
    export OS_PASSWORD=${PASSWORD_INPUT}
  fi

  # define default values
  LAMP_SSH_KEY_FILE=${LAMP_SSH_KEY_FILE:-${HOME}/.ssh/id_rsa.pub}
  LAMP_WEBSERVER_COUNT=${LAMP_WEBSERVER_COUNT:-1}
  LAMP_DB_ROOT_PASSWORD=${LAMP_DB_ROOT_PASSWORD:-root}
  LAMP_DB_USER=${LAMP_DB_USER:-lamp}
  LAMP_DB_PASSWORD=${LAMP_DB_PASSWORD:-lamp}
  LAMP_DB_NAME=${LAMP_DB_NAME:-lamp}


  # load public key
  LAMP_PUBKEY=$(cat ${LAMP_SSH_KEY_FILE})

  # export terraform variables
  export TF_VAR_webserver_count=${LAMP_APACHE_COUNT}
  export TF_VAR_image_name=${LAMP_IMAGE_NAME}
  export TF_VAR_flavor_name=${LAMP_FLAVOR_NAME}
  export TF_VAR_public_key="${LAMP_PUBKEY}"
}

function lamp_generate_inventory_file() {
  # create inventory file
  echo "[basic-setup]" > inventory
  for ip in ${LAMP_WEBSERVER_IPS} ${LAMP_DATABASE_IP} ${LAMP_BALANCER_IP}; do
    echo "$ip" >> inventory
  done
  echo "[webserver]" >> inventory
  for ip in ${LAMP_WEBSERVER_IPS}; do
    echo "$ip" >> inventory
  done
  echo "[database]" >> inventory
  echo "${LAMP_DATABASE_IP}" >> inventory
  echo "[balancer]" >> inventory
  echo "${LAMP_BALANCER_IP}" >> inventory
}

function lamp_generate_database_vars() {
  cat >database/ansible.vars <<EOF
db:
   root_password: ${LAMP_DB_ROOT_PASSWORD}
   user: ${LAMP_DB_USER}
   password: ${LAMP_DB_PASSWORD}
   name: ${LAMP_DB_NAME}
EOF
}

function lamp_start() {
  echo "starting lamp stack.."

  # spawning webservers
  pushd webserver > /dev/null
  terraform apply
  export LAMP_WEBSERVER_IPS=$(terraform output ip)
  popd

  # spawn database server
  pushd balancer > /dev/null
  terraform apply
  export LAMP_BALANCER_IP=$(terraform output ip)
  popd

  # spawn database server
  pushd database > /dev/null
  terraform apply
  export LAMP_DATABASE_IP=$(terraform output ip)
  popd


  lamp_generate_inventory_file
  lamp_generate_database_vars

  echo "run ansible..."
  ansible-playbook -e"need_wait=true" -i inventory lamp_stack.yml
}


function lamp_destroy() {
  echo "destroying lamp stack..."

  pushd database > /dev/null
  terraform destroy -force
  popd

  pushd balancer > /dev/null
  terraform destroy -force
  popd

  pushd webserver > /dev/null
  terraform destroy -force
  popd

  rm inventory
}

case $2 in
  start)
    lamp_load_configuration $1
    lamp_start
    ;;
  destroy)
    lamp_load_configuration $1
    lamp_destroy
    ;;
  *)
    echo "lamp_stack <start|destroy> ENV"
    ;;
esac
